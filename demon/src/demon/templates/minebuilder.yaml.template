apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: build-a-mine-
spec:
  entrypoint: build-mine
  volumeClaimTemplates:
  - metadata:
      name: workdir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 200Mi
  - metadata:
      name: sources
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: solr-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: tomcat-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
  templates:
  - name: build-mine
    steps:
    - - name: start-postgres
        template: postgres
      - name: start-solr
        template: solr
      - name: get-artifacts
        template: getter

    - - name: prepare-build
        template: prebuilder
        arguments:
          parameters:
          - name: postgres-host
            value: {% raw %}"{{steps.start-postgres.ip}}"{% endraw %}
          - name: solr-host
            value: {% raw %}"{{steps.start-solr.ip}}"{% endraw %}
          - name: tomcat-host
            value: {% raw %}"NOT-USED-HERE"{% endraw %}

    {% if bio %}
    - - name: install-bio-sources
        template: builder
        arguments:
          parameters:
          - name: task
            value: install
          - name: working-dir
            value: /home/intermine/{{ bio }}
    {% endif %}

    - - name: clean
        template: builder
        arguments:
          parameters:
          - name: task
            value: clean
    - - name: build-database
        template: builder
        arguments:
          parameters:
          - name: task
            value: buildDB
    {% for source in sources %}
    - - name: integrate-{{ source }}
        template: builder
        arguments:
          parameters:
          - name: task
            value: integrate -Psource={{ source }}
    {% endfor %}
    {% for postprocess in post_processing %}
    - - name: postprocess-{{ postprocess }}
        template: builder
        arguments:
          parameters:
          - name: task
            value: postProcess -Pprocess={{ postprocess }}
    {% endfor %}
    - - name: build-user-database
        template: builder
        arguments:
          parameters:
          - name: task
            value: buildUserDB

    # TODO update template to use passed POST url instead then re-enable once fixed
    # - - name: upload-artifacts
    #     template: artifacts

    # TODO: template if deploy
    - - name: start-services
        template: intermine-instance

    - - name: prepare-deploy
        template: prebuilder
        arguments:
          parameters:
          - name: postgres-host
            value: {% raw %}"{{workflow.name}}-postgres"{% endraw %}
          - name: solr-host
            value: {% raw %}"{{workflow.name}}-solr"{% endraw %}
          - name: tomcat-host
            value: {% raw %}"{{workflow.name}}-tomcat"{% endraw %}

    - - name: prepare-tomcat
        template: tomcat

    - - name: deploy
        template: war-builder
    # TODO end


  - name: postgres
    daemon: true
    retryStrategy:
      limit: 3
    container:
      image: intermine/postgres:0.0.2
      readinessProbe:
        exec:
          command:
          - psql
          - --user
          - postgres
          - mine
          - -c
          - '\q'
      volumeMounts:
      - name: postgres-data
        mountPath: /var/lib/postgresql/data
  - name: solr
    daemon: true
    retryStrategy:
      limit: 3
    container:
      image: intermine/solr:latest
      env:
      - name: MINE_NAME
        value: {{ mine_name }}
      readinessProbe:
        httpGet:
          path: /solr/{{ mine_name }}-search/admin/ping
          port: 8983
      volumeMounts:
      - name: solr-data
        mountPath: /var/solr
  - name: getter
    inputs:
      artifacts:
      - name: minedir
        path: /home/intermine/{{ mine_name }}
        http:
          url: {{ get_minedir }}
      - name: sources
        path: /data/{{ source_name }}
        http:
          url: {{ get_sources }}
      {% if bio %}
      - name: bio
        path: /home/intermine/{{ bio }}
        http:
          url: {{ get_bio }}
      {% endif %}
    container:
      image: alpine:3.8
      volumeMounts:
      - name: workdir
        mountPath: /home/intermine
      - name: sources
        mountPath: /data
  - name: prebuilder
    inputs:
      parameters:
      - name: postgres-host
      - name: solr-host
      - name: tomcat-host
    container:
      image: intermine/prebuild:latest
      command: ["builder_prepare"]
      args: ["--mine-path", "/home/intermine/{{ mine_name }}", "--override", "webapp.path={{ mine_name }}", "--override", "project.title={{ pretty_mine_name }}"]
      # TODO support property overrides in a way secrets aren't visible
      env:
      - name: PGHOST
        value: {% raw %}"{{inputs.parameters.postgres-host}}"{% endraw %}
      - name: SOLR_HOST
        value: {% raw %}"{{inputs.parameters.solr-host}}"{% endraw %}
      - name: TOMCAT_HOST
        value: {% raw %}"{{inputs.parameters.tomcat-host}}"{% endraw %}
      volumeMounts:
      - name: workdir
        mountPath: /home/intermine
  - name: builder
    inputs:
      parameters:
      - name: task
      - name: working-dir
        value: "/home/intermine/{{ mine_name }}"
    container:
      image: intermine/build:latest
      workingDir: {% raw %}"{{inputs.parameters.working-dir}}"{% endraw %}
      command: [sh, -c]
      args: {% raw %}["./gradlew {{inputs.parameters.task}}"]{% endraw %}
      resources:
        # These are requests, not limits, meaning more will be allocated if available.
        requests:
          memory: 4Gi
          cpu: 500m
      volumeMounts:
      - name: workdir
        mountPath: /home/intermine
      - name: sources
        mountPath: /data
  - name: artifacts
    container:
      image: alpine:3.8
      volumeMounts:
      - name: workdir
        mountPath: /home/intermine
      - name: postgres-data
        mountPath: /var/lib/postgresql/data
      - name: solr-data
        mountPath: /var/solr
    # TODO POST to address - don't pass to next step
    outputs:
      artifacts:
      - name: mine-dir
        path: /home/intermine/{{ mine_name }}
        s3:
          endpoint: {{ output_endpoint }}
          insecure: true
          bucket: {{ output_bucket }}
          key: {{ output_key }}-minedir
      - name: postgres-dump
        path: /var/lib/postgresql/data
        s3:
          endpoint: {{ output_endpoint }}
          insecure: true
          bucket: {{ output_bucket }}
          key: {{ output_key }}-postgres
      - name: solr-dump
        path: /var/solr
        s3:
          endpoint: {{ output_endpoint }}
          insecure: true
          bucket: {{ output_bucket }}
          key: {{ output_key }}-solr
  - name: intermine-instance
    resource:
      action: create
      manifest: |
        apiVersion: intermine.org/v1alpha1
        kind: IntermineInstance
        metadata:
          name: {% raw %}"{{workflow.name}}"{% endraw %}
          namespace: mine
        spec:
          postgresql:
            fullnameOverride: {% raw %}"{{workflow.name}}-postgres"{% endraw %}
            persistence:
              existingClaim: {% raw %}"{{workflow.name}}-postgres-data"{% endraw %}
              mountPath: /bitnami/postgresql/data
              subPath: data
          solr:
            fullnameOverride: {% raw %}"{{workflow.name}}-solr"{% endraw %}
            persistence:
              existingClaim: {% raw %}"{{workflow.name}}-solr-data"{% endraw %}
          tomcat:
            fullnameOverride: {% raw %}"{{workflow.name}}-tomcat"{% endraw %}
            persistence:
              existingClaim: {% raw %}"{{workflow.name}}-tomcat-data"{% endraw %}
            livenessProbe:
              httpGet:
                path: /{{ mine_name }}/begin.do
                port: 80
            readinessProbe:
              httpGet:
                path: /{{ mine_name }}/begin.do
                port: 80
            initContainers:
            - name: wait-for-pvc
              image: bitnami/kubectl:1.20.12
              command: ["kubectl"]
              args: {% raw %}["wait", "--for=condition=Completed=True", "workflow/{{workflow.name}}", "--timeout=-1s"]{% endraw %}
            ingress:
              hostname: legacy.{{ mine_name }}
          bluegenes:
            backendServiceRoot: {% raw %}http://{{workflow.name}}-tomcat:8080{% endraw %}/{{ mine_name }}
            serviceRoot: http://{{ mine_name }}/{{ mine_name }}
            mineName: {{ pretty_mine_name }}
            mineNamespace: {{ mine_name }}
          ingress:
            hostname: {{ mine_name }}
  - name: tomcat
    container:
      image: intermine/tomcat:latest
      # Copy Tomcat configs/libs/etc. excluding webapps.
      command: ["sh", "-c", "cp -av $CATALINA_HOME/. /tomcat && rm -rvf /tomcat/webapps"]
      volumeMounts:
      - name: tomcat-data
        mountPath: /tomcat
  - name: war-builder
    container:
      image: intermine/build:latest
      workingDir: /home/intermine/{{ mine_name }}
      command: [sh, -c]
      # TODO support webapp.path set to nested directory
      args: ["./gradlew war && mkdir -v /tomcat/webapps && cp -v webapp/build/libs/webapp.war /tomcat/webapps/{{ mine_name }}.war && chown -R 1001:1001 /tomcat/*"]
      resources:
        requests:
          memory: 4Gi
          cpu: 500m
      volumeMounts:
      - name: workdir
        mountPath: /home/intermine
      - name: tomcat-data
        mountPath: /tomcat
