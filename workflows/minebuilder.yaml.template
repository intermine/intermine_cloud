# This workflow is a Jinja template, so it needs variables to be
# injected before you can submit it.  It also depends on the following
# Persistent Volume Claims to be present on the same namespace:
# - prepared-workdir : represents `/home/intermine`, which should contain
#     - $mine_name directory with files required to build a mine
#     - .intermine/$mine_name.properties
# - sourcedata : required data for data source integration
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: build-a-mine
spec:
  entrypoint: build-mine
  volumes:
  - name: workdir
    persistentVolumeClaim:
      claimName: prepared-workdir
  - name: sourcedata
    persistentVolumeClaim:
      claimName: sourcedata
  # Volume Snapshots (https://kubernetes.io/docs/concepts/storage/volume-snapshots/)
  # might be useful to create snapshots of each volume between tasks, to
  # facilitate resuming at a previous point in case of failure. Although
  # Persistent Volumes for postgres and solr data could achieve the same thing,
  # so long as a failure doesn't "corrupt" this data.
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 4Gi
  - metadata:
      name: solr-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 4Gi
  templates:
  - name: build-mine
    steps:
    - - name: start-postgres
        template: postgres
      - name: start-solr
        template: solr

    - - name: prepare-build
        template: prebuilder
        arguments:
          parameters:
          - name: postgres-host
            value: {% raw %}"{{steps.start-postgres.ip}}"{% endraw %}
          - name: solr-host
            value: {% raw %}"{{steps.start-solr.ip}}"{% endraw %}

    - - name: clean
        template: builder
        arguments:
          parameters:
          - name: task
            value: clean
    - - name: build-database
        template: builder
        arguments:
          parameters:
          - name: task
            value: buildDB
    {% for source in sources %}
    - - name: integrate-{{ source }}
        template: builder
        arguments:
          parameters:
          - name: task
            value: integrate -Psource={{ source }}
    {% endfor %}
    {% for postprocess in post_processing %}
    - - name: postprocess-{{ postprocess }}
        template: builder
        arguments:
          parameters:
          - name: task
            value: postProcess -Pprocess={{ postprocess }}
    {% endfor %}
    - - name: build-user-database
        template: builder
        arguments:
          parameters:
          - name: task
            value: buildUserDB
    - - name: summarise-object-store
        template: builder
        arguments:
          parameters:
          - name: task
            value: summariseObjectStore

    - - name: prepare-deployment
        template: prebuilder
        arguments:
          parameters:
          - name: postgres-host
            value: {{ postgres_host }}
          - name: solr-host
            value: {{ solr_host }}

    - - name: create-war
        template: builder
        arguments:
          parameters:
          - name: task
            value: war -x summariseObjectStore

    - - name: release-artifacts
        template: artifacts


  - name: postgres
    daemon: true
    retryStrategy:
      limit: 3
    container:
      image: intermine/postgres:latest
      readinessProbe:
        exec:
          command:
          - psql
          - --user
          - postgres
          - mine
          - -c
          - '\q'
      volumeMounts:
      - name: postgres-data
        mountPath: /var/lib/postgresql/data
  - name: solr
    daemon: true
    retryStrategy:
      limit: 3
    container:
      image: intermine/solr:latest
      env:
      - name: MINE_NAME
        value: {{ mine_name }}
      readinessProbe:
        httpGet:
          path: /solr/{{ mine_name }}-search/admin/ping
          port: 8983
      volumeMounts:
      - name: solr-data
        mountPath: /var/solr
  - name: prebuilder
    inputs:
      parameters:
      - name: postgres-host
      - name: solr-host
    container:
      image: intermine/prebuild:latest
      command: ["builder_prepare"]
      args: ["--mine-path", "/home/intermine/{{ mine_name }}"]
      # TODO support property overrides in a way secrets aren't visible
      env:
      - name: PGHOST
        value: {% raw %}"{{inputs.parameters.postgres-host}}"{% endraw %}
      - name: SOLR_HOST
        value: {% raw %}"{{inputs.parameters.solr-host}}"{% endraw %}
      volumeMounts:
      - name: workdir
        mountPath: /home/intermine
  - name: builder
    inputs:
      parameters:
      - name: task
    container:
      image: intermine/build:latest
      workingDir: /home/intermine/{{ mine_name }}
      command: [sh, -c]
      args: {% raw %}["./gradlew {{inputs.parameters.task}}"]{% endraw %}
      resources:
        # These are requests, not limits, meaning more will be allocated if available.
        requests:
          memory: 4Gi
          cpu: 500m
      volumeMounts:
      - name: workdir
        mountPath: /home/intermine
      - name: sourcedata
        mountPath: /testdata
  - name: artifacts
    container:
      image: alpine:3.8
      volumeMounts:
      - name: workdir
        mountPath: /home/intermine
      - name: postgres-data
        mountPath: /var/lib/postgresql/data
      - name: solr-data
        mountPath: /var/solr
    outputs:
      artifacts:
      - name: mine-war
        path: /home/intermine/biotestmine/webapp/build/libs/webapp.war
      - name: postgres-dump
        path: /var/lib/postgresql/data
      - name: solr-dump
        path: /var/solr
